{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","redux/Phonebook/phonebook-actions.js","redux/Phonebook/phonebook-reduser.js","redux/store.js","redux/Phonebook/phonebook-selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","actions","addContact","createAction","payload","name","number","id","uuidv4","deleteContact","changeFilter","contactItems","createReducer","initialContacts","state","filter","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","phonebookReducer","devTools","process","middleware","getDefaultMiddleware","concat","logger","persistor","persistStore","getContacts","getFilter","getFiltredContacts","lowerCasedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","value","resetForm","className","s","container","onSubmit","preventDefault","some","element","alert","form","type","pattern","title","required","onChange","button","Filter","currentTarget","ContactList","list","map","item","text","onClick","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.187c3d71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__2szQN\",\"form\":\"ContactForm_form__2eyN7\",\"title\":\"ContactForm_title__3KoKi\",\"list\":\"ContactForm_list__3gJ_O\",\"item\":\"ContactForm_item__D1oPY\",\"text\":\"ContactForm_text__2Zi_w\",\"number\":\"ContactForm_number__xmkJ9\",\"button\":\"ContactForm_button__3z_QG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__3Pq-H\"};","import { v4 as uuidv4 } from 'uuid';\r\n// import { DELETE, SUBMIT, CHANGE_FILTER } from './phonebook-types';\r\n\r\n// export const addContact = (name, number) => ({\r\n//   type: SUBMIT,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// export const deleteContact = contactId => ({\r\n//   type: DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// export const changeFilter = value => ({\r\n//   type: CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\n\r\n//reduxjs/toolkit\r\n\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contacts/Add', ({ name, number }) => ({\r\n  payload: {\r\n    name,\r\n    number,\r\n    id: uuidv4(),\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('contacts/Delete');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nconst actions = { addContact, deleteContact, changeFilter };\r\n\r\nexport default actions;","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport actions from './phonebook-actions';\r\nimport initialContacts from '../../data/contacts.json';\r\n// import { SUBMIT, DELETE, CHANGE_FILTER } from './phonebook-types';\r\n\r\n// const contacts = (state = initialContacts, { type, payload }) => {\r\n//   switch (type) {\r\n//     case SUBMIT:\r\n//       console.log(type, payload);\r\n//       return state.some(\r\n//         el => el.name.toLowerCase() === payload.name.toLowerCase(),\r\n//       )\r\n//         ? alert(`${payload.name} is already in the directory.`)\r\n//         : [...state, payload];\r\n\r\n//     case DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n//reduxjs/Toolkit\r\n\r\nconst contactItems = createReducer(initialContacts, {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ contactItems, filter });","// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {  persistStore,  persistReducer,  FLUSH,  REHYDRATE,  PAUSE,  PERSIST,  PURGE,  REGISTER } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport phonebookReducer from './Phonebook/phonebook-reduser';\r\n\r\n// const rootReducer = combineReducers({\r\n//   phonebook: phonebookReducer,\r\n// });\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n//хранилище с toolkit\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n// const rootReducer = combineReducers({ phonebook: phonebookReducer });\r\n// const persistedReducer = persistReducer(contactsPersistConfig, rootReducer);\r\n\r\n// const middleware = [\r\n//   ...getDefaultMiddleware({\r\n//     serializableCheck: {\r\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//     },\r\n//   }),\r\n//   logger,\r\n// ];\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, phonebookReducer),\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  // middleware,\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n// console.log(persistor);","export const getContacts = state => state.contacts.contactItems;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getFiltredContacts = state => {\r\n  const lowerCasedFilter = getFilter(state).toLowerCase();\r\n  const filteredContacts = getContacts(state).filter(({ name }) =>\r\n    name.toLowerCase().includes(lowerCasedFilter),\r\n  );\r\n  return filteredContacts;\r\n};","import { useState } from 'react';\n\n// import PropTypes from 'prop-types';\n// import shortid from 'shortid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/Phonebook/phonebook-selectors';\nimport actions from '../../redux/Phonebook/phonebook-actions';\n\nimport s from './ContactForm.module.css';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmint = e => {\n    e.preventDefault();\n    const comparableElement = contacts.some(\n      element => element.name.toLowerCase() === name.toLowerCase(),\n    );\n    if (comparableElement) {\n      resetForm();\n      return alert(`${name} is already in the directory`);\n    }\n    dispatch(actions.addContact({ name, number }));\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n\n  return (\n    <div className={s.container}>\n      <form onSubmit={handleSubmint} className={s.form}>\n        <h3>Name</h3>\n        <label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={handleChange}\n          />\n        </label>\n        <h3>Number</h3>\n        <label>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={s.button}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\n// ContactForm.propTypes = {\n//   submit: PropTypes.func.isRequired,\n// };\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/Phonebook/phonebook-selectors';\nimport actions from '../../redux/Phonebook/phonebook-actions';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = e => {\n    dispatch(actions.changeFilter(e.currentTarget.value));\n  };\n  return (\n    <div className={s.container}>\n      <h3>Finde contacts by name</h3>\n      <label>\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={onChange} />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","// import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFiltredContacts } from '../../redux/Phonebook/phonebook-selectors';\nimport actions from '../../redux/Phonebook/phonebook-actions'; //../../redux/Phonebook/phonebook-actions'\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(getFiltredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <div className={s.container}>\n      <ul className={s.list}>\n        {contacts.map(({ id, name, number }) => (\n          <li key={id} className={s.item}>\n            <p className={s.text}>\n              {name}:<span className={s.number}>{number}</span>\n            </p>\n            <button\n              type=\"button\"\n              className={s.button}\n              onClick={() => dispatch(actions.deleteContact(id))}\n            >\n              delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n};\n  \n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     }),\n//   ),\n//   onDeleteContact: PropTypes.func,\n// };\n\nexport default ContactList;\n","// import { connect } from 'react-redux';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n// import actions from '../../redux/Phonebook/phonebook-actions';\n\n\nfunction App() {\n  // const [contacts, setContacts] = useState(() => {\n  //   return JSON.parse(\n  //     window.localStorage.getItem('contacts') ?? initialContacts,\n  //   );\n  // });\n  // const [filter, setFilter] = useState('');\n\n  // const formSubmitHandler = data => {\n  //   const comparableElement = contacts.some(\n  //     element => element.name.toLowerCase() === data.name.toLowerCase(),\n  //   );\n  //   if (comparableElement) {\n  //     return alert('contact is already in the directory');\n  //   }\n  // };\n\n  // const changeFilter = e => {\n  //   setFilter(e.target.value);\n  // };\n\n  // const getVisibleContact = () => {\n  //   const contactFilter = filter.toLowerCase();\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(contactFilter),\n  //   );\n  // };\n\n  // const deleteContact = contactId => {\n  //   setContacts(contacts.filter(contact => contact.id !== contactId));\n  // };\n\n  // useEffect(() => {\n  //   window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <Filter />\n      <h2 >Contacts</h2>\n      <ContactList />\n    </>\n  );\n}\n// const mapStateToProps = state => {\n//   return {\n//     contacts: state,\n//   };\n// };\n// const mapDispatchToProps = dispatch => ({\n//   addNote: text => dispatch(actions.addContact(text)),\n// });\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { PersistGate } from 'redux-persist/integration/react';\n// import store from './redux/store';\nimport { store, persistor } from './redux/store';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={<h2>Wait,loading</h2>} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactList_container__sqF8l\",\"title\":\"ContactList_title__vgppB\",\"list\":\"ContactList_list__3r3tJ\",\"item\":\"ContactList_item__gMkip\",\"text\":\"ContactList_text__25y58\",\"number\":\"ContactList_number__1XwOa\",\"button\":\"ContactList_button__2IlFi\"};"],"sourceRoot":""}